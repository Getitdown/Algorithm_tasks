Приведите пример использования амортизированного анализа в практике:

двоичный инкрементальный счётчик. Увеличение счетчика на 1 (операция increment) происходит так, что мы начинаем с младшего разряда, и если он становится равен нулю (то есть, после девятки), мы должны увеличить следующий разряд и так далее.
Амортизационный анализ:
* Обычная операция increment O(1) (увеличение без переноса).
* Операция increment с переносом зависит от количества разрядов, которые нужно перенести.
В худшем случае, операция может быть O(k), где k — количество разрядов.
Однако, средняя стоимость каждой операции increment равна O(1), потому что каждый разряд увеличивается и сбрасывается обратно в ноль логарифмическое количество раз
Таким образом, общая стоимость увеличения n-разрядного счетчика на k шагов амортизируется до O(1) на операцию. 


// Написать код, который принимает на вход массив и число элементов, и возвращает новый массив, 
// который содержит все элементы исходного массива и заданное число новых элементов.

function myArray(arr, numElems, newElems = 8) {
    let newArray = arr.slice();

    for (let i = 0; i < numElems; i++){
        newArray.push(newElems)
    }
    return newArray
}

let originArray = [1, 2, 3, 4, 5, 6, 7]
let numsOfNewElem = 2
console.log(myArray(originArray, numsOfNewElem))
